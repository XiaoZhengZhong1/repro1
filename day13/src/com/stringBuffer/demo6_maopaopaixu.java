package com.stringBuffer;

public class demo6_maopaopaixu {

	public static void main(String[] args) {

/*冒泡排序
	相邻元素两两比较，大的往后放，第一次完毕，最大值出现在了最大索引处*/
/* 需求：
	* 数组元素：{24, 69, 80, 57, 13}
	* 请对数组元素进行排序。
	
	* 选择排序
		* 从0索引开始，依次和后面元素比较，小的往前放，第一次完毕，最小值出现在了最小索引处	
*/
//冒泡排序原理,轻的上浮,就是小的数据在前面,重的下沉,就是大的数据在后面.	比较时每比较完一圈,最大的一个都会被放到最后面.提出了不需要再比.
//题目分析:用之前学过的打印九九乘法表,for嵌套循环	

		int[] arr = {24,69,80,57,13};
			maoPao(arr);
		selectSort(arr);
		
		print(arr);	
		
		print(arr);
		//输出结果:13,24,57,69,80,	
	}			//因为只是打印,所有不需要返回值
	public static void maoPao(int[] arr ){		//冒泡排序方法,用for嵌套,比较调换,进行从小到大排序
		for (int i = 0; i < arr.length-1; i++) {	//注意因为外循环是从0开始的,数字长度length是5,5个数字比较4此就可以了
													//循环0 1 2 3 就有4次了.所有i<arr.length-1
			
			for (int j = 0; j < arr.length-1-i; j++) {	//注意因为内循环完一次,冒泡排序比较原理会比较替换出一个最大值,放到
													//最后,不需要再比较了,也就是说,内循环完一次,下次循环就可以少比较一次
													//而且循环完1次少比1次,2次少2次,3次少3次,是在变化的,和外循环的i相同
													//所有 j<arr.leng-1-i
				if(arr[j] > arr[j+1]){
				/*	int a = arr[j];			//用第三方变量a把大的转过去.
					arr[j] = arr[j+1];		//把小的转给前面的索引
					arr[j+1] =  a;			//把大的转给后面的索引
*/				swap(arr,j,j+1);//传递参数,调用底下的交换方法.
					}
				
			}		
		}
		
	}
/*##13.15_常见对象(数组高级选择排序代码实现)
* A:案例演示
	* 数组高级选择排序代码
*/
/*选择排序就是从0索引开始,依次和后面的其它索引进行比较,把最小的放到0索引,再从1索引开始,依次和后面的索引进行比较,把最小的放到1索引,又从2
索引开始.....依次类推.和冒泡排序不同的是,冒泡排序是依次相互比较0和1,1和2,2和3.而选择排序是0和1,0和2,0和3.都是用for嵌套执行.

*/
//先来个排序方法.
	public static void selectSort(int[] arr){	//方法selectSort选择排序 ,  还是用上面是数组.
		for (int i = 0; i < arr.length-1; i++) {
				for (int j = i + 1; j < arr.length; j++) {	
/*
 j=i+1,因为选择排序是把比较出来的最小的放前面,并且提出来.所以第一次外循环0进来,下面if里面是0和0+1,比较.符合选择排序顺序.当内循环完一圈
 后0索引会记录最小的值,被提出了.不再用0索引比较了,第二次外循环进来就是从1开始和2比较,所以int j的赋值需要根据被提出来的索引而变化,因为外
循环的索引值每次到内循环,循环完都回提出来.所以int j = i,下面if里面i是要和后面的依次比较所以int j=i+1,
 */
												
				if(arr[i] > arr[j]){	
					/*int a = arr[i];
					arr[i] = arr[j];  
					arr[j] = a;*/
					swap(arr,i,j);//传递参数.调用底下的交换方法
				}
					
				}
		}
		
	}
	
	
//再来个打印方法.		直接用上面冒泡排序的打印方法,因为是一模一样的,有一个就可以了,
	public static void print(int[] arr){			//打印方法,用for循环遍历数字
		for (int i = 0; i < arr.length; i++) {
			System.out.print(arr[i] + ",");
		}
	}
	
//由于上面冒泡排序和选择排序if里面的比较和用变量替换的方法的是一样的.下面专门写一个交换的方法.	
//swap交换的意思,	int[] arr,int i,int j 这些是参入交换的参数.
	public static void swap(int[] arr,int i,int j){	
		if(arr[i] > arr[j]){
			int c = arr[i];
			arr[i] = arr[j];
			arr[j] = c;
		}
		
		
	}



}




