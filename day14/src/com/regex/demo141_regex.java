package com.regex;

public class demo141_regex {

	public static void main(String[] args) {
/*###14.01_常见对象(正则表达式的概述和简单使用)
* A:正则表达式
	* 是指一个用来描述或者匹配一系列符合某个语法规则的字符串的单个字符串。其实就是一种规则。有自己特殊的应用。
	* 作用:比如注册邮箱,邮箱有用户名和密码,一般会对其限制长度,这个限制长度的事情就是正则表达式做的
* B:案例演示
	* 需求：校验qq号码.
		* 1:要求必须是5-15位数字
		* 2:0不能开头
		* 3:必须都是数字
		
	* a:非正则表达式实现
	* b:正则表达式实现
*/
/*题目分析?-----因为是要校验qq号,也就是判断是否符合要求.就需要一个判断method方法,要判断1:要求,判断字符串长度length,2:要求不能0开头
要用到startsWith()方法,要求3:必须是数字,还得来个if表达式表达必须是1到9的数字.
*1:返回值类型,Boolean   //检查是否符合要求.符合就返回true,不符合就返回false
*2:方法,chenkqq    //检查qq
*3:参数,String qq  //qq密码是一串数字组合,就是一个字符串.
*/	

//注意for循环中,法如果需要循环中的索引值进行if或者别的判断,一定要先用第三方变量,比如:char c = b[i];如果不记录,参入比较判断是索引

		
//下面是演示证明,校验密码方法太繁琐,50几行代码.今天学的正则表达式,1行代码就能搞定.		
		

		
		
	
//regex表示正则表达,也是一个个字符串,
	String regex = "[1-9]\\d{4,14}";		/*[1-9]表示从1开始到9的数字,从1开始排除了0开头.\\d表示1到9范围之类的任意数字
	{4,14}表示长度在4到14之间,因为[1-9]里面会有一个值,后面取4到14个,加前面一个,就满足5到15的要求*/
	System.out.println("330455".matches(regex));/*matches(regex)------这是string类里专门匹配regex的方法
	"330455"代表字符串.matches是匹配的意思,也是方法(regex)就是匹配正则表达式*/
	
	
	//System.out.println(checkqq("63147"));    //调用检查方法,并赋值.
	}
	public static boolean checkqq(String qq){
		boolean a = true;//因为下面要做判断,判断有true和false两结果.而返回结果只有一个,所以在判断中需要变量来接收判断结果,返回.
		if(qq.length() >= 5 && qq.length() <= 15){	//表示如果qq字符串长度是5到15之间,就继续语句提
			if(!qq.startsWith("0")){				//表示如果qq不是以0开始,就继续语句体.
				char[] b = qq.toCharArray();		//因为3要求必须是数字,就要遍历.就要把字符串转换成字符数组.
					for (int i = 0; i < b.length; i++) {		//因为要判断里面所有字符是否都是数字,就要遍历.
						char c = b[i];      /*注意,一定要把索引对应的值记录下来,qq的值才会显示并在下行的if中进行判断,
	如果直接用吧b[i]到下面if中进行判断,将会是索引01234....到if中进行判断.而表示qq的值63147					 																			*/
						if(!(c >= '0' && c <= '9')){			/*!非,表示如果i不在1到9之间,就继续语句体.是的话,所有
	判断语句结束,返回最上面的a=true,因为从第一个if到第3给if,都是满足条件才能进语句体的,								*/
						a = false;	//表示如果i不在1到9之间,a = false;
						break;		//条件不满足,结束整个方法.
						}
					}
			
			}else{a = false;}						//表示qq不是以0开始,就是false
			
		}else{a = false;}							//表示qq字符串长度不是5到15之间,就是false
		
		return a;
	}
	
}
